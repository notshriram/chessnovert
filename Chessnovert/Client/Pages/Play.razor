@page "/play"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Chessnovert.Shared
@using Microsoft.AspNetCore.SignalR.Client
@*@attribute [Authorize]
@inject HttpClient Http*@
@inject NavigationManager NavManager

<div id="creategamewizard" class="d-flex flex-column gap-2">
    <h3> Create a Game </h3>

    <label for="timecontrolbtngroup">Time Control</label>
    <div class="btn-group" id="timecontrolbtngroup">
        <input type="radio" class="btn-check" name="timecontrol" id="option1minute" autocomplete="off" checked>

        <label class="btn btn-dark" for="option1minute">1 minute</label>

        <input type="radio" class="btn-check" name="timecontrol" id="option3minutes" autocomplete="off">

        <label class="btn btn-dark" for="option3minutes">3 minutes</label>

        <input type="radio" class="btn-check" name="timecontrol" id="option5minutes" autocomplete="off">

        <label class="btn btn-dark" for="option5minutes">5 minutes</label>

        <input type="radio" class="btn-check" name="timecontrol" id="option10minutes" autocomplete="off">

        <label class="btn btn-dark" for="option10minutes">10 minutes</label>
    </div>

    <label for="playasbtngroup">Play as</label>
    <div class="btn-group" id="playasbtngroup">
        <input type="radio" class="btn-check" name="playercolor" id="optionWhite" autocomplete="off" checked>

        <label class="btn btn-dark" for="optionWhite">White</label>

        <input type="radio" class="btn-check" name="playercolor" id="optionRandom" autocomplete="off">

        <label class="btn btn-dark" for="optionRandom">Random</label>

        <input type="radio" class="btn-check" name="playercolor" id="optionBlack" autocomplete="off">

        <label class="btn btn-dark" for="optionBlack">Black</label>
    </div>

    <button class="btn btn-outline-primary" @onclick="CreateGame">Create Game</button>
</div>

<div>
    @if (Games != null)
    {
        @foreach (Chessnovert.Shared.Game game in Games)
        {
            <div>
                <a href="/game/@game.Id">@game.Id</a>
            </div>
        }
    }
</div>
@code {
    List<Chessnovert.Shared.Game>? Games;
    HttpClient httpClient = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //TO BE REPLACED WITH: injected http;
            Games = await httpClient.GetFromJsonAsync<List<Chessnovert.Shared.Game>>("https://tl222.local:5001/api/Games");
        }
        catch (Exception exception)
        {
            //exception.Redirect();
            Console.WriteLine(exception);
        }
    }

    async Task CreateGame()
    {
        // send current user Id
        var response = await httpClient.PostAsJsonAsync("https://tl222.local:5001/api/Games", new TimeSpan(0, 10, 0));
        if (response.IsSuccessStatusCode)
        {
            Chessnovert.Shared.Game? createdGame = await response.Content.ReadFromJsonAsync<Chessnovert.Shared.Game>();

            if (createdGame != null)
            {
                NavManager.NavigateTo($"/game/{createdGame.Id}");
            }

            else
            {
                Console.WriteLine("Failed to Create Game");
            }
        }
    }
}