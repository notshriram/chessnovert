@page "/play"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Chessnovert.Shared
@using Microsoft.AspNetCore.SignalR.Client
@*@attribute [Authorize]
@inject HttpClient Http*@

@if(isInGame){
    <Board HubConnection="hubConnection" GameId="@gameId"/>
}
else {
    <button class="btn btn-outline-primary" @onclick="CreateGame">Create Game</button>
    <div>
        @if(openGames!=null){
            @foreach (string gameid in openGames)
            {
                <button @onclick="()=>JoinGame(gameid)">@gameid</button>
            }
        }

    </div>
}
@code {
    HubConnection hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44385/connect").Build();
    bool isInGame = false;
    Guid gameId;
    List<string>? openGames;

    protected override async Task OnInitializedAsync(){
        try
        {
            //TO BE REPLACED WITH: injected http;
            HttpClient httpClient = new();
            openGames = await httpClient.GetFromJsonAsync<List<string>>("https://localhost:44385/api/Games/OpenChallenges");
        }
        catch (Exception exception)
        {
            //exception.Redirect();
            Console.WriteLine(exception);
        }
    }

    async Task CreateGame(){
        await hubConnection.StartAsync();
        gameId = Guid.NewGuid();
        await hubConnection.SendAsync("JoinGame", gameId.ToString());
        isInGame = true;
    }

    async Task JoinGame(string gameId){
        await hubConnection.StartAsync();
        this.gameId = Guid.Parse(gameId);
        await hubConnection.SendAsync("JoinGame", gameId);
        isInGame = true;
    }
}