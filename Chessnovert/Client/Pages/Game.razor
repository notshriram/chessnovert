@page "/game/{GameId:guid}"
@using Chessnovert.Shared
@using Chessnovert.Shared.Chess.Enums
@using Microsoft.AspNetCore.SignalR.Client

@if(found!=null)
{

    if(found==true)
    {
        <div class="d-flex flex-row gap-2">
            <Board HubConnection="hubConnection" 
                   Game="@game"
                   PlayerColor="@playerColor"
                   OnMoveCompleted="SynchronizeClocks" />
            <div class="d-flex flex-column justify-content-between align-items-center">
                    @* replace with timer component*@
                    <div>Black: @remainingSecondsBlack</div>
                    <div>White: @remainingSecondsWhite</div>
            </div>
        </div>
    }
    else
    {
        <p role="alert">Sorry, there's nothing at this address.</p>
    }
}
else 
{
    <p>Loading</p>
}

@code {

    [Parameter]
    public Guid GameId { get; set; }
    HubConnection hubConnection = new HubConnectionBuilder().WithUrl("https://tl222.local:5001/connect").Build();
    HttpClient httpClient = new();
    bool? found;
    public Chessnovert.Shared.Game? game;
    Color? playerColor;
    Color currentlyMoving = Color.White;
    int remainingSecondsBlack, remainingSecondsWhite;
    private Task? _clockTask;
    private readonly PeriodicTimer _timer = new PeriodicTimer(TimeSpan.FromMilliseconds(1000));
    private readonly CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync(){
        game = await httpClient.GetFromJsonAsync<Chessnovert.Shared.Game>($"https://tl222.local:5001/api/Games/{GameId}");
        if(game != null)
        {
            if(game.PlayerWhite == Guid.Empty)
            {
                // Join as Player White
                playerColor = Color.White;
            }
            else if (game.PlayerBlack == Guid.Empty)
            {
                // Join as Player Black
                playerColor = Color.Black;
            }
            else 
            {
                // Join as Spectator
                playerColor = null;
            }
            Console.WriteLine(playerColor);
            foreach(var move in game.Moves){
                Console.WriteLine("Previously.. " + move.Source + " " + move.Destination);
            }
            await JoinGame();
            found = true;
            remainingSecondsBlack = remainingSecondsWhite = (int)game.TimeControl.TotalSeconds;
            _clockTask = UpdateClocksAsync();
        }
        else
        {
            found = false;
        }
    }
    async Task JoinGame()
    {
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGame",GameId);
    }
    protected void SynchronizeClocks(int remainingTime)
    {
        if(currentlyMoving == Color.White)
        {
            remainingSecondsWhite = remainingTime;
            currentlyMoving = Color.Black;
        }
        else if(currentlyMoving == Color.Black)
        {
            remainingSecondsBlack = remainingTime;
            currentlyMoving = Color.White;
        }
    }

    private async Task UpdateClocksAsync()
    {
        try
        {
            while(await _timer.WaitForNextTickAsync(_cts.Token))
            {
                if(currentlyMoving == Color.White)
                {
                    remainingSecondsWhite--;
                    StateHasChanged();
                }
                else if (currentlyMoving == Color.Black)
                {
                    remainingSecondsBlack--;
                    StateHasChanged();
                }
                Console.WriteLine($"Black: {remainingSecondsBlack} :: White: {remainingSecondsWhite}");
            }
        }
        catch (OperationCanceledException e)
        {
            Console.WriteLine(e.Message);
        }
    }

    public async Task StopAsync()
    {
        if(_clockTask is null)
        {
            return;
        }
        _cts.Cancel();
        await _clockTask;
        _cts.Dispose();
        Console.WriteLine("Cancelled");
    }
}
