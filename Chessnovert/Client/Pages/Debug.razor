@page "/experimental"
@using Chessnovert.Shared
@using Chessnovert.Shared.Chess.Enums
@using Microsoft.AspNetCore.SignalR.Client

<div id="board-container">
    <div id="board">
        <Experimental
                Game="@game"
                OnChangeHook="OnChangeHook"
                PlayerColor="@playerColor"/>
    </div>
    <div id="black-infobar" class="@GetInfobarCssClass(Color.Black)" >
        <PlayerInfoBar FullName="Chessnobot" Time="@remainingTimeBlack"/>
    </div>
    <div id="game-info-panel" class="px-2"> 
        @if(game.Opening!=null)
        {
            <div class="text-sm-start">
                @game.Opening.ECO : @game.Opening.Name
            </div>
        }
        else
        {
            <div>
            </div>
        }
        <table class="table table-borderless table-hover">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">White</th>
                    <th scope="col">Black</th>
                </tr>
            </thead>
            <tbody>
                @for(int i=0;i<game.Moves.Count;i+=2)
                {
                    <tr>
                        @if(i+1==game.Moves.Count)
                        {
                            <th scope="row">@(1 + @i / 2)</th>
                            <td colspan="2">@game.Moves[i].Source @game.Moves[i].Destination</td>
                        }
                        else
                        {
                            <th scope="row">@(1 + @i/2)</th>
                            <td>@game.Moves[i].Source @game.Moves[i].Destination</td>
                            <td>@game.Moves[i+1].Source @game.Moves[i+1].Destination</td>
                        }
                    </tr>
                    
                }
            </tbody>
        </table>
    </div>
    <div id="white-infobar" class="@GetInfobarCssClass(Color.White)">
        <PlayerInfoBar FullName="You" Time="@remainingTimeWhite" />
    </div>
</div>

@code {
    public Chessnovert.Shared.Game game = new();
    Color? playerColor;
    Color currentlyMoving = Color.White;
    TimeSpan remainingTimeBlack, remainingTimeWhite;
    private Task? _clockTask;
    private readonly PeriodicTimer _timer = new PeriodicTimer(TimeSpan.FromMilliseconds(1000));
    private readonly CancellationTokenSource _cts = new();
    string? result = null;

    private async Task OnChangeHook()
    {
        await Task.Delay(100);
        StateHasChanged();
    }
    protected string GetInfobarCssClass(Color color)
    {
        if (color == playerColor)
        {
            return "bottom-infobar";
        }
        else return "top-infobar";
    }

    protected override void OnInitialized()
    {
        playerColor = Color.White;
        remainingTimeBlack = TimeSpan.FromMinutes(5);
        remainingTimeWhite = TimeSpan.FromMinutes(5);
    }

    protected void StartClocks()
    {
        _clockTask = UpdateClocksAsync();
    }

    protected void SynchronizeClocks(TimeSpan remainingTime)
    {
        if (_clockTask == null)
        {
            StartClocks();
        }
        if (currentlyMoving == Color.White)
        {
            remainingTimeWhite = remainingTime;
            currentlyMoving = Color.Black;
        }
        else if (currentlyMoving == Color.Black)
        {
            remainingTimeBlack = remainingTime;
            currentlyMoving = Color.White;
        }
    }

    private async Task UpdateClocksAsync()
    {
        try
        {
            while (await _timer.WaitForNextTickAsync(_cts.Token))
            {
                if (currentlyMoving == Color.White)
                {
                    remainingTimeWhite -= TimeSpan.FromMilliseconds(1000);
                    StateHasChanged();
                }
                else if (currentlyMoving == Color.Black)
                {
                    remainingTimeBlack -= TimeSpan.FromMilliseconds(1000);
                    StateHasChanged();
                }
            }
        }
        catch (OperationCanceledException e)
        {
            Console.WriteLine("UpdateClocksAsync Exception: " + e.Message);
        }
    }

    public async Task StopClocksAsync()
    {
        if (_clockTask is null)
        {
            return;
        }
        _cts.Cancel();
        await _clockTask;
        _cts.Dispose();
        Console.WriteLine("Cancelled");
    }

    public async Task OnGameOver(string message)
    {
        await StopClocksAsync();
        Console.WriteLine(message);
        StateHasChanged();
    }
}
