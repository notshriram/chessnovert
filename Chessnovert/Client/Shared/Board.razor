@using Chessnovert.Shared
@using Chessnovert.Shared.Chess
@using Chessnovert.Shared.Chess.Enums
@using Microsoft.AspNetCore.SignalR.Client

<div class="board">
    @for (int i = 0; i < 8; i++)
    {
        int Row = PlayerColor == Color.Black ? i : 7 - i;
        <div class="rank">
            @for (int j = 0; j < 8; j++)
            {
                int Col = PlayerColor == Color.Black ? j : 7 - j;
                Piece? piece = board[Row, Col];
                Coordinate position = new Coordinate { Row = Row, Col = Col };

                bool isValid = false;
                if (activePiece != null)
                {
                    isValid = TryMove(activePiece.Position, position);
                }
                <div @onclick="()=>MoveToPosition(position)" class="cell @(isValid?"valid":"")">
                    @if (piece != null)
                    {
                        <div @onclick="()=>SelectPiece(piece)"
                 class="piece @piece.Name @piece.Color.ToString() @(piece == activePiece? "active" : "")">
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>


@code {
    // SignalR
    [Parameter]
    public HubConnection? HubConnection { get; set; }

    [Parameter]
    public Chessnovert.Shared.Game Game { get; set; }

    [Parameter]
    public Color? PlayerColor { get; set; }

    [Parameter]
    public EventCallback<TimeSpan> OnMoveCompleted { get; set; }

    // TODO: Take Template Param "GameResult" Result
    [Parameter]
    public EventCallback<string> OnGameOver { get; set; }

    Piece[,] board = new Piece[8, 8];
    Piece activePiece = null!;
    Color currentTurn;
    int validMoves = 0;

    protected override void OnInitialized()
    {

        for (int j = 0; j < 8; j++)
        {
            board[1, j] = new Pawn(Color.White, new Coordinate { Row = 1, Col = j });
            board[6, j] = new Pawn(Color.Black, new Coordinate { Row = 6, Col = j });
        }
        //White Pieces
        board[0, 0] = new Rook(Color.White, new Coordinate { Row = 0, Col = 0 });
        board[0, 1] = new Knight(Color.White, new Coordinate { Row = 0, Col = 1 });
        board[0, 2] = new Bishop(Color.White, new Coordinate { Row = 0, Col = 2 });
        board[0, 3] = new King(Color.White, new Coordinate { Row = 0, Col = 3 });
        board[0, 4] = new Queen(Color.White, new Coordinate { Row = 0, Col = 4 });
        board[0, 5] = new Bishop(Color.White, new Coordinate { Row = 0, Col = 5 });
        board[0, 6] = new Knight(Color.White, new Coordinate { Row = 0, Col = 6 });
        board[0, 7] = new Rook(Color.White, new Coordinate { Row = 0, Col = 7 });

        //Black Pieces
        board[7, 0] = new Rook(Color.Black, new Coordinate { Row = 7, Col = 0 });
        board[7, 1] = new Knight(Color.Black, new Coordinate { Row = 7, Col = 1 });
        board[7, 2] = new Bishop(Color.Black, new Coordinate { Row = 7, Col = 2 });
        board[7, 3] = new King(Color.Black, new Coordinate { Row = 7, Col = 3 });
        board[7, 4] = new Queen(Color.Black, new Coordinate { Row = 7, Col = 4 });
        board[7, 5] = new Bishop(Color.Black, new Coordinate { Row = 7, Col = 5 });
        board[7, 6] = new Knight(Color.Black, new Coordinate { Row = 7, Col = 6 });
        board[7, 7] = new Rook(Color.Black, new Coordinate { Row = 7, Col = 7 });

        currentTurn = Color.White;
        validMoves = CountValidMoves(currentTurn);

        base.OnInitialized();

        // Play all the moves that have occured upto this point
        List<Move> moves = Game.Moves;
        if (moves.Count != 0)
        {
            foreach (var move in moves)
            {
                OnMoveEvent(move.Source, move.Destination, Game.TimeControl);
            }
        }
        else
        {
            Console.WriteLine("Empty Move List");
        }

        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                if (board[i, j] != null)
                    Console.Write(board[i, j].Value);
            }
            Console.WriteLine();
        }

        if (HubConnection != null)
        {
            // Event Listeners

            HubConnection.On("GameJoined", () =>
            {
                Console.WriteLine("Another Player has Joined the Game");
            });

            HubConnection.On<Coordinate, Coordinate, TimeSpan>("Moved", (Coordinate source, Coordinate destination, TimeSpan remainingTime) =>
            {
                OnMoveEvent(source, destination, remainingTime);
                var previousColor = currentTurn == Color.White ? Color.Black : Color.White;
                Game.Moves.Add(new Move(source, destination, previousColor));
            });

            HubConnection.On<TimeSpan>("Synchronize", remaining => { OnMoveCompleted.InvokeAsync(remaining); });

            HubConnection.On<Color>("TimedOut", (color) =>
            {
                Console.WriteLine($"{color} has run out of time");
                OnGameOver.InvokeAsync("Timeout");
            });
        }
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    for (int i = 1; i <= 5; i++)
    //    {
    //        var numOfMoves = await MoveGenerationTest(i);
    //        Console.WriteLine($"Depth {i} Ply: No. Of Moves {numOfMoves}");
    //    }
    //}

    protected void MoveToPosition(Coordinate position)
    {
        Console.WriteLine(position);
        if (activePiece != null)
        {

            if (TryMove(activePiece.Position, position))
            {
                //Console.WriteLine("legal");

                // Check for Castle
                if (activePiece.Value == 'K'
                && (position.Row == activePiece.Position.Row)
                && (Math.Abs(position.Col - activePiece.Position.Col) == 2))
                {
                    int direction = activePiece.Position.Col > position.Col ? -1 : 1;
                    Piece? rook = board[activePiece.Position.Row, position.Col + direction];
                    Coordinate rookDestination = new Coordinate(position.Row, position.Col - direction);

                    if (CanCastle(activePiece, position))
                    {
                        // flip le rook
                        board[rook.Position.Row, rook.Position.Col] = null!;
                        rook.Position = rookDestination;
                        board[rookDestination.Row, rookDestination.Col] = rook;
                        Console.WriteLine("Castled");
                    }
                }
                if (HubConnection != null)
                {
                    HubConnection.SendAsync("Move", Game.Id, activePiece.Position, position, PlayerColor);
                    //Console.WriteLine("SendAsync Move");
                }

                Game.Moves.Add(new Move(activePiece.Position, position, activePiece.Color));
                board[activePiece.Position.Row, activePiece.Position.Col] = null!;
                activePiece.Position = position;
                board[position.Row, position.Col] = activePiece;
                activePiece = null!;
                currentTurn = currentTurn == Color.White ? Color.Black : Color.White;
                Console.WriteLine($"It's {currentTurn}'s turn");
                validMoves = CountValidMoves(currentTurn);
                if (validMoves == 0)
                {
                    OnGameOver.InvokeAsync("Checkmate");
                }
            }
            else if (position == activePiece.Position)
            {
                Console.WriteLine("Selected " + activePiece.Color + activePiece.Name);
            }
            else
            {
                activePiece = null!;
                //Console.WriteLine("illegal");
            }
        }
    }
    protected void OnMoveEvent(Coordinate source, Coordinate destination, TimeSpan remainingTime)
    {
        Console.WriteLine("Moved from " + source + " to " + destination);
        var sourcePiece = board[source.Row, source.Col];
        if (sourcePiece != null)
        {
            activePiece = sourcePiece;

            if (activePiece.IsLegal(destination, board))
            {
                if (activePiece.Value == 'K'
                && (destination.Row == activePiece.Position.Row)
                && (Math.Abs(destination.Col - activePiece.Position.Col) == 2))
                {
                    if (CanCastle(activePiece, destination))
                    {
                        var position = destination;
                        int direction = activePiece.Position.Col > position.Col ? -1 : 1;
                        Piece? rook = board[activePiece.Position.Row, position.Col + direction];
                        Coordinate rookDestination = new Coordinate(position.Row, position.Col - direction);

                        board[rook.Position.Row, rook.Position.Col] = null!;
                        rook.Position = rookDestination;
                        board[rookDestination.Row, rookDestination.Col] = rook;
                    }
                    else return;

                }
                //Console.WriteLine("legal");
                board[activePiece.Position.Row, activePiece.Position.Col] = null!;
                activePiece.Position = destination;
                board[destination.Row, destination.Col] = activePiece;
                activePiece = null!;
            }
        }
        currentTurn = currentTurn == Color.White ? Color.Black : Color.White;
        Console.WriteLine($"It's {currentTurn}'s turn");
        OnMoveCompleted.InvokeAsync(remainingTime);
        validMoves = CountValidMoves(currentTurn);
        if (validMoves == 0)
        {
            OnGameOver.InvokeAsync("Checkmate");
        }
        StateHasChanged();
    }

    protected void SelectPiece(Piece piece)
    {
        if (currentTurn != piece.Color || PlayerColor != piece.Color)
        {
            return;
        }
        activePiece = piece;
    }

    protected bool IsKingInCheck(Color color)
    {
        Piece? king = null;
        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                if (board[i, j] != null && board[i, j].Value == 'K')
                {
                    if (board[i, j].Color == color)
                    {
                        king = board[i, j];
                    }
                }
            }
        }
        // WTF
        if (king == null)
        {
            throw new NullReferenceException($"No {color} King Found");
        }

        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                Piece? currentPiece = board[i, j];
                if (currentPiece != null)
                {
                    if (currentPiece.IsLegal(king.Position, board))
                    {
                        //Console.WriteLine($"{currentPiece.Color} {currentPiece.Name} can capture {color} King");
                        return true;
                    }
                }
            }
        }
        return false;
    }

    protected bool TryMove(Coordinate source, Coordinate destination)
    {
        var sourcePiece = board[source.Row, source.Col];
        var destinationPiece = board[destination.Row, destination.Col];
        bool isIllegal = true;
        if (sourcePiece != null)
        {
            if (sourcePiece.IsLegal(destination, board))
            {
                //Console.WriteLine("Pseudo Legal Check Passed");
                // make move
                board[source.Row, source.Col] = null!;
                sourcePiece.Position = destination;
                board[destination.Row, destination.Col] = sourcePiece;
                if (!IsKingInCheck(sourcePiece.Color))
                {
                    isIllegal = false;
                }
                else
                {
                    //Console.WriteLine("King exposed to check");
                }
                // unmake move
                board[destination.Row, destination.Col] = destinationPiece;
                sourcePiece.Position = source;
                board[source.Row, source.Col] = sourcePiece;
            }
        }
        return !isIllegal;
    }

    protected bool TryCastle(Piece king, Coordinate kingDestination,
        Piece rook, Coordinate rookDestination)
    {
        var kingSource = king.Position;
        var rookSource = rook.Position;
        var kingDestinationOccupant = board[kingDestination.Row, kingDestination.Col];
        var rookDestinationOccupant = board[rookDestination.Row, rookDestination.Col];

        if (kingDestinationOccupant != null || rookDestinationOccupant != null)
        {
            return false;
        }

        // result
        bool isIllegal = true;

        // make move
        board[king.Position.Row, king.Position.Col] = null!;
        king.Position = kingDestination;
        board[kingDestination.Row, kingDestination.Col] = king;

        board[rook.Position.Row, rook.Position.Col] = null!;
        rook.Position = rookDestination;
        board[rookDestination.Row, rookDestination.Col] = rook;


        if (!IsKingInCheck(king.Color))
        {
            isIllegal = false;
        }

        // unmake move
        board[king.Position.Row, king.Position.Col] = null!;
        king.Position = kingSource;
        board[kingSource.Row, kingSource.Col] = king;

        board[rook.Position.Row, rook.Position.Col] = null!;
        rook.Position = rookSource;
        board[rookSource.Row, rookSource.Col] = rook;

        return !isIllegal;
    }

    protected bool CanCastle(Piece king, Coordinate destination)
    {

        if (king.Value != 'K')
        {
            return false;
        }
        if (king.Position.Row != destination.Row)
        {
            return false;
        }

        int direction = king.Position.Col > destination.Col ? -1 : 1;

        Piece? rook = board[king.Position.Row, destination.Col + direction];

        if (rook == null) return false;

        for (int i = king.Position.Col + direction; i != destination.Col; i += direction)
            if (!TryMove(king.Position, new Coordinate(destination.Row, i)))
                return false;

        return TryCastle(king, destination, rook, new Coordinate(destination.Row, destination.Col - direction));
    }

    public int CountValidMoves(Color color)
    {
        int count = 0;
        for (int i = 0; i < 8; i++)
            for (int j = 0; j < 8; j++)
            {
                Coordinate source = new Coordinate(i, j);
                if (board[i, j] != null && board[i, j].Color == color)
                {
                    for (int r = 0; r < 8; r++)
                        for (int c = 0; c < 8; c++)
                        {
                            Coordinate destination = new Coordinate(r, c);
                            if (TryMove(source, destination)) count++;
                        }
                }
            }
        return count;
    }

    public List<Move> GenerateMoveList()
    {
        List<Move> MoveList = new();
        for (int i = 0; i < 8; i++)
            for (int j = 0; j < 8; j++)
            {
                Coordinate source = new Coordinate(i, j);
                if (board[i, j] != null && board[i, j].Color == currentTurn)
                {
                    for (int r = 0; r < 8; r++)
                        for (int c = 0; c < 8; c++)
                        {
                            Coordinate destination = new Coordinate(r, c);
                            if (TryMove(source, destination)) MoveList.Add(new Move(source, destination, board[i, j].Color));
                        }
                }
            }
        return MoveList;
    }

    public async Task<int> MoveGenerationTest(int depth)
    {
        if (depth == 0)
        {
            return 1;
        }
        List<Move> moves = GenerateMoveList();
        int count = 0;
        foreach (var move in moves)
        {
            var source = move.Source;
            var destination = move.Destination;
            Piece? sourcePiece = board[source.Row, source.Col];
            Piece? destinationPiece = board[destination.Row, destination.Col];

            //make move
            board[source.Row, source.Col] = null!;
            sourcePiece.Position = destination;
            board[destination.Row, destination.Col] = sourcePiece;
            currentTurn = currentTurn == Color.White ? Color.Black : Color.White;
            //movenumber++;
            //movestring = $"{source} {destination}";
            //StateHasChanged();
            //await Task.Delay(150);
            count += await MoveGenerationTest(depth - 1);
            // unmake move
            board[destination.Row, destination.Col] = destinationPiece;
            sourcePiece.Position = source;
            board[source.Row, source.Col] = sourcePiece;
            currentTurn = currentTurn == Color.White ? Color.Black : Color.White;
            //StateHasChanged();
            //await Task.Delay(150);

        }
        return count;
    }



}
