@using Chessnovert.Shared
@using Chessnovert.Shared.Chess
@using Chessnovert.Shared.Chess.Enums
@using Microsoft.AspNetCore.SignalR.Client

<div class="board">
    @for (int i = 0; i < 8; i++)
    {
        int Row = PlayerColor == Color.Black ? i : 7 - i;
        <div class="board-row">
            @for (int j = 0; j < 8; j++)
            {
                int Col = PlayerColor == Color.Black ? j : 7 - j;
                Piece? piece = board[Row, Col];
                Coordinate position = new Coordinate { Row = Row, Col = Col };

                bool isValid = false;
                if (activePiece != null)
                {
                    isValid = activePiece.IsLegal(position, board);
                }
                <div @onclick="()=>MoveToPosition(position)" class="cell @(isValid?"valid":"")">
                    @if (piece != null)
                    {
                        <div @onclick="()=>SelectPiece(piece)"
                 class="piece @piece.Name @piece.Color.ToString() @(piece == activePiece? "active" : "")">
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {

    // SignalR
    [Parameter]
    public HubConnection? HubConnection { get; set; }

    [Parameter]
    public Chessnovert.Shared.Game Game { get; set; }

    [Parameter]
    public Color? PlayerColor { get; set; }

    [Parameter]
    public EventCallback<int> OnMoveCompleted { get; set; }

    // TODO: Take Template Param String Reason
    [Parameter]
    public EventCallback OnGameOver { get; set; }

    Piece[,] board = new Piece[8, 8];
    Piece activePiece = null!;
    Color currentTurn;

    protected override void OnInitialized()
    {

        for (int j = 0; j < 8; j++)
        {
            board[1, j] = new Pawn(Color.White, new Coordinate { Row = 1, Col = j });
            board[6, j] = new Pawn(Color.Black, new Coordinate { Row = 6, Col = j });
        }
        //White Pieces
        board[0, 0] = new Rook(Color.White, new Coordinate { Row = 0, Col = 0 });
        board[0, 1] = new Knight(Color.White, new Coordinate { Row = 0, Col = 1 });
        board[0, 2] = new Bishop(Color.White, new Coordinate { Row = 0, Col = 2 });
        board[0, 3] = new King(Color.White, new Coordinate { Row = 0, Col = 3 });
        board[0, 4] = new Queen(Color.White, new Coordinate { Row = 0, Col = 4 });
        board[0, 5] = new Bishop(Color.White, new Coordinate { Row = 0, Col = 5 });
        board[0, 6] = new Knight(Color.White, new Coordinate { Row = 0, Col = 6 });
        board[0, 7] = new Rook(Color.White, new Coordinate { Row = 0, Col = 7 });

        //Black Pieces
        board[7, 0] = new Rook(Color.Black, new Coordinate { Row = 7, Col = 0 });
        board[7, 1] = new Knight(Color.Black, new Coordinate { Row = 7, Col = 1 });
        board[7, 2] = new Bishop(Color.Black, new Coordinate { Row = 7, Col = 2 });
        board[7, 3] = new King(Color.Black, new Coordinate { Row = 7, Col = 3 });
        board[7, 4] = new Queen(Color.Black, new Coordinate { Row = 7, Col = 4 });
        board[7, 5] = new Bishop(Color.Black, new Coordinate { Row = 7, Col = 5 });
        board[7, 6] = new Knight(Color.Black, new Coordinate { Row = 7, Col = 6 });
        board[7, 7] = new Rook(Color.Black, new Coordinate { Row = 7, Col = 7 });

        currentTurn = Color.White;

        base.OnInitialized();

        // Play all the moves that have occured upto this point
        List<Move> moves = Game.Moves;
        if (moves.Count != 0)
        {
            foreach (var move in moves)
            {
                OnMoveEvent(move.Source, move.Destination, (int)Game.TimeControl.TotalSeconds);
            }
        }
        else
        {
            Console.WriteLine("Empty Move List");
        }

        for (int i = 0; i < 8; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                if (board[i, j] != null)
                    Console.Write(board[i, j].Value);
            }
            Console.WriteLine();
        }

        if (HubConnection != null)
        {
            // Event Listeners

            HubConnection.On("GameJoined", () =>
            {
                Console.WriteLine("Another Player has Joined the Game");
            });

            HubConnection.On<Coordinate, Coordinate, int>("Moved", OnMoveEvent);

            HubConnection.On<int>("Synchronize", i => { OnMoveCompleted.InvokeAsync(i); });

            HubConnection.On<Color>("TimedOut", (color) => { 
                Console.WriteLine($"{color} has run out of time");
                OnGameOver.InvokeAsync();
            });

        }

    }
    protected void MoveToPosition(Coordinate position)
    {
        Console.WriteLine(position.Row.ToString() + position.Col.ToString());
        if (activePiece != null)
        {
            if (activePiece.IsLegal(position, board))
            {
                Console.WriteLine("legal");
                if (HubConnection != null)
                {
                    HubConnection.SendAsync("Move", Game.Id, activePiece.Position, position, PlayerColor);
                    Console.WriteLine("SendAsync Move");
                }
                board[activePiece.Position.Row, activePiece.Position.Col] = null!;
                activePiece.Position = position;
                board[position.Row, position.Col] = activePiece;
                activePiece = null!;
                currentTurn = currentTurn == Color.White ? Color.Black : Color.White;
                Console.WriteLine($"It's {currentTurn}'s turn");
            }
            else if (position == activePiece.Position)
            {
                Console.WriteLine("Selected " + activePiece.Color + activePiece.Name);
            }
            else
            {
                activePiece = null!;
                Console.WriteLine("illegal");
            }
        }
    }
    protected void OnMoveEvent(Coordinate source, Coordinate destination, int remainingTime)
    {
        Console.WriteLine("Move from " + source.Row + source.Col + " to " + destination.Row + destination.Col);
        var sourcePiece = board[source.Row, source.Col];
        if (sourcePiece != null)
        {
            activePiece = sourcePiece;
            if (activePiece.IsLegal(destination, board))
            {
                Console.WriteLine("legal");
                board[activePiece.Position.Row, activePiece.Position.Col] = null!;
                activePiece.Position = destination;
                board[destination.Row, destination.Col] = activePiece;
                activePiece = null!;
            }
        }
        currentTurn = currentTurn == Color.White ? Color.Black : Color.White;
        Console.WriteLine($"It's {currentTurn}'s turn");
        OnMoveCompleted.InvokeAsync(remainingTime);
        StateHasChanged();
    }

    protected void SelectPiece(Piece piece)
    {
        if (currentTurn != piece.Color || PlayerColor != piece.Color)
        {
            return;
        }
        activePiece = piece;
    }
}
