@inherits LayoutComponentBase
@inject IJSRuntime js;

<div class="page @getThemeClass()">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth">
            <button class="theme-switcher oi @getIconClass()" @onclick="changeTheme">
            </button>
            <LoginDisplay />
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string selectedTheme = "Light";
    private DotNetObjectReference<MainLayout>? objRef;

    [JSInvokable]
    public async Task OnSystemThemeChange(bool isDarkMode)
    {
        if(isDarkMode)
        {
            selectedTheme = "Dark";
        }
        else 
        {
            selectedTheme = "Light";
        }
        StateHasChanged();
        await js.InvokeVoidAsync("addToLocalStorage", "theme", selectedTheme);
    }

    protected override async Task OnInitializedAsync()
    {
        // Start event listener in index.html
        objRef = DotNetObjectReference.Create(this);
        await TriggerDotNetInstanceMethod();

        // Set Theme According to Saved theme or System Preference
        var savedTheme = await js.InvokeAsync<string>("getFromLocalStorage", "theme");
        var systemPrefersDark = await js.InvokeAsync<bool>("prefersDarkTheme");
        if(!string.IsNullOrEmpty(savedTheme))
        {
            selectedTheme = savedTheme;
        }
        else if (systemPrefersDark)
        {
            selectedTheme = "Dark";
        }
    }

    // Add System Theme Event Listener
    public async Task TriggerDotNetInstanceMethod()
    {
        await js.InvokeAsync<string>("onSystemThemeChange", objRef);
    }

    private bool IsSelected(string option)
    {
        return option == selectedTheme;
    }

    private string getThemeClass()
    {
        switch(selectedTheme)
        {
            case "Light": return String.Empty;
            case "Dark" : return "dark-mode";
            default: return String.Empty;
        }
    }

    private string getIconClass()
    {
        switch (selectedTheme)
        {
            case "Light": return "oi-moon";
            case "Dark": return "oi-sun";
            default: return String.Empty;
        }
    }

    private async Task changeTheme()
    {
        selectedTheme = IsSelected("Light") ? "Dark" : "Light";
        await js.InvokeVoidAsync("addToLocalStorage", "theme", selectedTheme);
    }
}